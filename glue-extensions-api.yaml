#  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License").
#  You may not use this file except in compliance with the License.
#  A copy of the License is located at
#
#   http://aws.amazon.com/apache2.0
#
#  or in the "license" file accompanying this file. This file is distributed
#  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
#  express or implied. See the License for the specific language governing
#  permissions and limitations under the License.

---
openapi: 3.0.3
info:
  title: AWS Glue Data Catalog Extensions API
  license:
    name: Apache 2.0
    url: http://aws.amazon.com/apache2.0
  version: 0.1.5
servers:
  - url: "https://glue.{region}.amazonaws.com/extensions"
    description: AWS Glue Data Catalog endpoint
    variables:
      region:
        description: AWS region
        default: "us-east-1"
  - url: "https://glue-fips.{region}.amazonaws.com/extensions"
    description: AWS Glue Data Catalog FIPS endpoint
    variables:
      region:
        description: AWS region
        default: "us-east-1"

paths:
  /v1/catalogs/{catalog}:
    parameters:
      - $ref: '#/components/parameters/catalog'
    get:
      operationId: LoadCatalog
      responses:
        202:
          $ref: '#/components/responses/LoadCatalogResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        409:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
        503:
          $ref: '#/components/responses/ErrorResponse'

  /v1/catalogs/{catalog}/namespaces:
    parameters:
      - $ref: '#/components/parameters/catalog'
    post:
      operationId: CreateNamespace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNamespaceRequest'
      responses:
        202:
          $ref: '#/components/responses/TransactionStartedResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        409:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
        503:
          $ref: '#/components/responses/ErrorResponse'

  /v1/catalogs/{catalog}/namespaces/{namespace}:
    parameters:
      - $ref: '#/components/parameters/catalog'
      - $ref: '#/components/parameters/namespace'
    delete:
      operationId: DropNamespace
      responses:
        202:
          $ref: '#/components/responses/TransactionStartedResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        404:
          $ref: '#/components/responses/ErrorResponse'
        409:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
        503:
          $ref: '#/components/responses/ErrorResponse'

  /v1/catalogs/{catalog}/namespaces/{namespace}/tables:
    parameters:
      - $ref: '#/components/parameters/catalog'
      - $ref: '#/components/parameters/namespace'
    post:
      operationId: CreateTable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTableRequest'
      responses:
        202:
          $ref: '#/components/responses/TransactionStartedResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        409:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
        503:
          $ref: '#/components/responses/ErrorResponse'

  /v1/catalogs/{catalog}/namespaces/{namespace}/tables/{table}:
    parameters:
      - $ref: '#/components/parameters/catalog'
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/table'
    get:
      operationId: LoadTable
      parameters:
        - $ref: '#/components/parameters/context'
      responses:
        200:
          $ref: '#/components/responses/LoadTableResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        404:
          $ref: '#/components/responses/ErrorResponse'
        409:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
        503:
          $ref: '#/components/responses/ErrorResponse'

    post:
      operationId: UpdateTable
      parameters:
        - $ref: '#/components/parameters/context'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitTableRequest'
      responses:
        202:
          $ref: '#/components/responses/TransactionStartedResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        404:
          $ref: '#/components/responses/ErrorResponse'
        409:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
        503:
          $ref: '#/components/responses/ErrorResponse'

    delete:
      operationId: DropTable
      parameters:
        - name: purgeRequested
          in: query
          required: false
          description: Whether the user requested to purge the underlying table's data and metadata
          schema:
            type: boolean
            default: false
      responses:
        202:
          $ref: '#/components/responses/TransactionStartedResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        404:
          $ref: '#/components/responses/ErrorResponse'
        409:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
        503:
          $ref: '#/components/responses/ErrorResponse'

  /v1/catalogs/{catalog}/namespaces/{namespace}/tables/{table}/preplan:
    parameters:
      - $ref: '#/components/parameters/catalog'
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/table'
    post:
      operationId: PreplanTable
      parameters:
        - $ref: '#/components/parameters/page-token'
        - $ref: '#/components/parameters/page-size'
        - $ref: '#/components/parameters/context'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreplanTableRequest'
      responses:
        200:
          $ref: '#/components/responses/PreplanTableResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        404:
          $ref: '#/components/responses/ErrorResponse'
        409:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
        503:
          $ref: '#/components/responses/ErrorResponse'

  /v1/catalogs/{catalog}/namespaces/{namespace}/tables/{table}/plan:
    parameters:
      - $ref: '#/components/parameters/catalog'
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/table'
    post:
      operationId: PlanTable
      parameters:
        - $ref: '#/components/parameters/page-token'
        - $ref: '#/components/parameters/page-size'
        - $ref: '#/components/parameters/context'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanTableRequest'
      responses:
        200:
          $ref: '#/components/responses/PlanTableResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        404:
          $ref: '#/components/responses/ErrorResponse'
        409:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
        503:
          $ref: '#/components/responses/ErrorResponse'

  /v1/catalogs/{catalog}/transactions/status:
    parameters:
      - $ref: '#/components/parameters/catalog'
    post:
      operationId: CheckTransactionStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckTransactionStatusRequest'
      responses:
        200:
          $ref: '#/components/responses/CheckTransactionStatusResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        404:
          $ref: '#/components/responses/ErrorResponse'
        409:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
        503:
          $ref: '#/components/responses/ErrorResponse'

components:
  parameters:
    catalog:
      name: catalog
      in: path
      required: true
      description:
        A catalog identifier as a single string.
        Multipart catalog parts should be separated by colon (`:`).
      schema:
        type: string
      examples:
        singlepart_catalog:
          value: "123456789012"
        multipart_catalog:
          value: "123456789012:cat1"

    namespace:
      name: namespace
      in: path
      required: true
      description:
        A namespace name
      schema:
        type: string
      example: "ns1"

    table:
      name: table
      in: path
      description: A table name
      required: true
      schema:
        type: string
      example: "sales"

    page-token:
      name: pageToken
      in: query
      required: false
      allowEmptyValue: true
      schema:
        $ref: '#/components/schemas/PageToken'

    page-size:
      name: pageSize
      in: query
      description:
        For servers that support pagination, this signals an upper bound of the number of results that a client will receive.
        For servers that do not support pagination, clients may receive results larger than the indicated `pageSize`.
      required: false
      schema:
        type: integer
        minimum: 1

    context:
      name: context
      in: query
      description:
        A String that contains the context information about the query.
        The actual content of the context is not specified by this specification.
        for example `GET /tables/t1?context=e0785a06-9ecd-4832-acdb-8fea12894fe2`.
      required: false
      schema:
        type: string

  schemas:
    CreateNamespaceRequest:
      type: object
      required:
        - namespace
      properties:
        namespace:
          $ref: '#/components/schemas/Namespace'
        properties:
          type: object
          description: Configured string to string map of properties for the namespace
          example: { "owner": "Hank Bendickson" }
          default: { }
          additionalProperties:
            type: string

    Namespace:
      description: Reference to one or more levels of a namespace
      type: array
      items:
        type: string
      example: [ "accounting", "tax" ]

    PageToken:
      description:
        An opaque token that allows clients to make use of pagination for list APIs (e.g. ListTables)
        as well as for scan-planning APIs (e.g PlanTable). Clients may initiate the first paginated request by sending an empty
        query parameter `pageToken` to the server.
        
        Servers that support pagination should identify the `pageToken` parameter and return a
        `next-page-token` in the response if there are more results available.  After the initial
        request, the value of `next-page-token` from each response must be used as the `pageToken`
        parameter value for the next request. The server must return `null` value for the
        `next-page-token` in the last response.
        
        Servers that support pagination must return all results in a single response with the value
        of `next-page-token` set to `null` if the query parameter `pageToken` is not set in the
        request.
        
        Servers that do not support pagination should ignore the `pageToken` parameter and return
        all results in a single response. The `next-page-token` must be omitted from the response.
        
        Clients must interpret either `null` or missing response value of `next-page-token` as
        the end of the listing results.

      type: string
      nullable: true

    TableIdentifier:
      type: object
      required:
        - namespace
        - name
      properties:
        namespace:
          $ref: '#/components/schemas/Namespace'
        name:
          type: string
          nullable: false

    PrimitiveType:
      type: string
      example:
        - "long"
        - "string"
        - "fixed[16]"
        - "decimal(10,2)"

    StructField:
      type: object
      required:
        - id
        - name
        - type
        - required
      properties:
        id:
          type: integer
        name:
          type: string
        type:
          $ref: '#/components/schemas/Type'
        required:
          type: boolean
        doc:
          type: string

    StructType:
      type: object
      required:
        - type
        - fields
      properties:
        type:
          type: string
          enum: ["struct"]
        fields:
          type: array
          items:
            $ref: '#/components/schemas/StructField'

    ListType:
      type: object
      required:
        - type
        - element-id
        - element
        - element-required
      properties:
        type:
          type: string
          enum: ["list"]
        element-id:
          type: integer
        element:
          $ref: '#/components/schemas/Type'
        element-required:
          type: boolean

    MapType:
      type: object
      required:
        - type
        - key-id
        - key
        - value-id
        - value
        - value-required
      properties:
        type:
          type: string
          enum: ["map"]
        key-id:
          type: integer
        key:
          $ref: '#/components/schemas/Type'
        value-id:
          type: integer
        value:
          $ref: '#/components/schemas/Type'
        value-required:
          type: boolean

    Type:
      oneOf:
        - $ref: '#/components/schemas/PrimitiveType'
        - $ref: '#/components/schemas/StructType'
        - $ref: '#/components/schemas/ListType'
        - $ref: '#/components/schemas/MapType'

    Schema:
      allOf:
        - $ref: '#/components/schemas/StructType'
        - type: object
          properties:
            schema-id:
              type: integer
              readOnly: true
            identifier-field-ids:
              type: array
              items:
                type: integer

    Transform:
      type: string
      example:
        - "identity"
        - "year"
        - "month"
        - "day"
        - "hour"
        - "bucket[256]"
        - "truncate[16]"

    PartitionField:
      type: object
      required:
        - source-id
        - transform
        - name
      properties:
        field-id:
          type: integer
        source-id:
          type: integer
        name:
          type: string
        transform:
          $ref: '#/components/schemas/Transform'

    PartitionSpec:
      type: object
      required:
        - fields
      properties:
        spec-id:
          type: integer
          readOnly: true
        fields:
          type: array
          items:
            $ref: '#/components/schemas/PartitionField'

    SortDirection:
      type: string
      enum: ["asc", "desc"]

    NullOrder:
      type: string
      enum: ["nulls-first", "nulls-last"]

    SortField:
      type: object
      required:
        - source-id
        - transform
        - direction
        - null-order
      properties:
        source-id:
          type: integer
        transform:
          $ref: '#/components/schemas/Transform'
        direction:
          $ref: '#/components/schemas/SortDirection'
        null-order:
          $ref: '#/components/schemas/NullOrder'

    SortOrder:
      type: object
      required:
        - order-id
        - fields
      properties:
        order-id:
          type: integer
          readOnly: true
        fields:
          type: array
          items:
            $ref: '#/components/schemas/SortField'

    BaseUpdate:
      discriminator:
        propertyName: action
        mapping:
          add-schema: '#/components/schemas/AddSchemaUpdate'
          set-current-schema: '#/components/schemas/SetCurrentSchemaUpdate'
          add-spec: '#/components/schemas/AddPartitionSpecUpdate'
          set-default-spec: '#/components/schemas/SetDefaultSpecUpdate'
          add-sort-order: '#/components/schemas/AddSortOrderUpdate'
          set-default-sort-order: '#/components/schemas/SetDefaultSortOrderUpdate'
          set-properties: '#/components/schemas/SetPropertiesUpdate'
          remove-properties: '#/components/schemas/RemovePropertiesUpdate'
          overwrite-rows-with-manifest: '#/components/schemas/OverwriteRowsWithManifest'
          overwrite-rows-with-delete-filter: '#/components/schemas/OverwriteRowsWithDeleteFilter'
          rename-table: '#/components/schemas/RenameTable'
      type: object
      required:
        - action
      properties:
        action:
          type: string

    AddSchemaUpdate:
      allOf:
        - $ref: '#/components/schemas/BaseUpdate'
      required:
        - action
        - schema
      properties:
        action:
          type: string
          enum: ["add-schema"]
        schema:
          $ref: '#/components/schemas/Schema'
        last-column-id:
          type: integer
          description: The highest assigned column ID for the table.

    SetCurrentSchemaUpdate:
      allOf:
        - $ref: '#/components/schemas/BaseUpdate'
      required:
        - action
        - schema-id
      properties:
        action:
          type: string
          enum: ["set-current-schema"]
        schema-id:
          type: integer
          description: Schema ID to set as current, or -1 to set last added schema

    AddPartitionSpecUpdate:
      allOf:
        - $ref: '#/components/schemas/BaseUpdate'
      required:
        - action
        - spec
      properties:
        action:
          type: string
          enum: ["add-spec"]
        spec:
          $ref: '#/components/schemas/PartitionSpec'

    SetDefaultSpecUpdate:
      allOf:
        - $ref: '#/components/schemas/BaseUpdate'
      required:
        - action
        - spec-id
      properties:
        action:
          type: string
          enum: [ "set-default-spec" ]
        spec-id:
          type: integer
          description: Partition spec ID to set as the default, or -1 to set last added spec

    AddSortOrderUpdate:
      allOf:
        - $ref: '#/components/schemas/BaseUpdate'
      required:
        - action
        - sort-order
      properties:
        action:
          type: string
          enum: [ "add-sort-order" ]
        sort-order:
          $ref: '#/components/schemas/SortOrder'

    SetDefaultSortOrderUpdate:
      allOf:
        - $ref: '#/components/schemas/BaseUpdate'
      required:
        - action
        - sort-order-id
      properties:
        action:
          type: string
          enum: [ "set-default-sort-order" ]
        sort-order-id:
          type: integer
          description: Sort order ID to set as the default, or -1 to set last added sort order

    SetPropertiesUpdate:
      allOf:
        - $ref: '#/components/schemas/BaseUpdate'
      required:
        - action
        - updates
      properties:
        action:
          type: string
          enum: [ "set-properties" ]
        updates:
          type: object
          additionalProperties:
            type: string

    RemovePropertiesUpdate:
      allOf:
        - $ref: '#/components/schemas/BaseUpdate'
      required:
        - action
        - removals
      properties:
        action:
          type: string
          enum: [ "remove-properties" ]
        removals:
          type: array
          items:
            type: string
    OverwriteRowsWithManifest:
      allOf:
        - $ref: '#/components/schemas/BaseUpdate'
      required:
        - action
      properties:
        action:
          type: string
          enum: [ "overwrite-rows-with-manifest" ]
        added-manifest-locations:
          description: locations of manifests that each describes a list of files to be added to a table
          type: array
          items:
            $ref: '#/components/schemas/ManifestLocation'
        removed-manifest-locations:
          description: locations of manifests that each describes a list of files to be added to a table
          type: array
          items:
            $ref: '#/components/schemas/ManifestLocation'

    OverwriteRowsWithDeleteFilter:
      allOf:
        - $ref: '#/components/schemas/BaseUpdate'
      required:
        - action
      properties:
        action:
          type: string
          enum: [ "overwrite-rows-with-delete-filter" ]
        added-manifest-locations:
          description: list of manifest locations to be added to a table
          type: array
          items:
            $ref: '#/components/schemas/ManifestLocation'
        delete-filter:
          description: filter used to remove data from a table, in the form of serialized Iceberg expressions JSON
          type: string

    RenameTable:
      allOf:
        - $ref: '#/components/schemas/BaseUpdate'
      required:
        - action
        - destination
      properties:
        action:
          type: string
          enum: [ "rename-table" ]
        destination:
          $ref: '#/components/schemas/TableIdentifier'

    TableUpdate:
      anyOf:
        - $ref: '#/components/schemas/AddSchemaUpdate'
        - $ref: '#/components/schemas/SetCurrentSchemaUpdate'
        - $ref: '#/components/schemas/AddPartitionSpecUpdate'
        - $ref: '#/components/schemas/SetDefaultSpecUpdate'
        - $ref: '#/components/schemas/AddSortOrderUpdate'
        - $ref: '#/components/schemas/SetDefaultSortOrderUpdate'
        - $ref: '#/components/schemas/SetPropertiesUpdate'
        - $ref: '#/components/schemas/RemovePropertiesUpdate'
        - $ref: '#/components/schemas/OverwriteRowsWithManifest'
        - $ref: '#/components/schemas/OverwriteRowsWithDeleteFilter'
        - $ref: '#/components/schemas/RenameTable'

    TableRequirement:
      type: object
      discriminator:
        propertyName: type
        mapping:
          assert-create: '#/components/schemas/AssertCreate'
          assert-table-uuid: '#/components/schemas/AssertTableUUID'
          assert-ref-snapshot-id: '#/components/schemas/AssertRefSnapshotId'
          assert-last-assigned-field-id: '#/components/schemas/AssertLastAssignedFieldId'
          assert-current-schema-id: '#/components/schemas/AssertCurrentSchemaId'
          assert-last-assigned-partition-id: '#/components/schemas/AssertLastAssignedPartitionId'
          assert-default-spec-id: '#/components/schemas/AssertDefaultSpecId'
          assert-default-sort-order-id: '#/components/schemas/AssertDefaultSortOrderId'
      oneOf:
        - $ref: '#/components/schemas/AssertCreate'
        - $ref: '#/components/schemas/AssertTableUUID'
        - $ref: '#/components/schemas/AssertRefSnapshotId'
        - $ref: '#/components/schemas/AssertLastAssignedFieldId'
        - $ref: '#/components/schemas/AssertCurrentSchemaId'
        - $ref: '#/components/schemas/AssertLastAssignedPartitionId'
        - $ref: '#/components/schemas/AssertDefaultSpecId'
        - $ref: '#/components/schemas/AssertDefaultSortOrderId'

    AssertCreate:
      type: object
      description: The table must not already exist; used for create transactions
      required:
        - type
      properties:
        type:
          type: string
          enum: ["assert-create"]

    AssertTableUUID:
      description: The table UUID must match the requirement's `uuid`
      required:
        - type
        - uuid
      properties:
        type:
          type: string
          enum: ["assert-table-uuid"]
        uuid:
          type: string

    AssertRefSnapshotId:
      description:
        The table branch or tag identified by the requirement's `ref` must reference the requirement's `snapshot-id`;
        if `snapshot-id` is `null` or missing, the ref must not already exist
      required:
        - type
        - ref
        - snapshot-id
      properties:
        type:
          type: string
          enum: [ "assert-ref-snapshot-id" ]
        ref:
          type: string
        snapshot-id:
          type: integer
          format: int64

    AssertLastAssignedFieldId:
      description:
        The table's last assigned column id must match the requirement's `last-assigned-field-id`
      required:
        - type
        - last-assigned-field-id
      properties:
        type:
          type: string
          enum: [ "assert-last-assigned-field-id" ]
        last-assigned-field-id:
          type: integer

    AssertCurrentSchemaId:
      description:
        The table's current schema id must match the requirement's `current-schema-id`
      required:
        - type
        - current-schema-id
      properties:
        type:
          type: string
          enum: [ "assert-current-schema-id" ]
        current-schema-id:
          type: integer

    AssertLastAssignedPartitionId:
      description:
        The table's last assigned partition id must match the requirement's `last-assigned-partition-id`
      required:
        - type
        - last-assigned-partition-id
      properties:
        type:
          type: string
          enum: [ "assert-last-assigned-partition-id" ]
        last-assigned-partition-id:
          type: integer

    AssertDefaultSpecId:
      description:
        The table's default spec id must match the requirement's `default-spec-id`
      required:
        - type
        - default-spec-id
      properties:
        type:
          type: string
          enum: [ "assert-default-spec-id" ]
        default-spec-id:
          type: integer

    AssertDefaultSortOrderId:
      description:
        The table's default sort order id must match the requirement's `default-sort-order-id`
      required:
        - type
        - default-sort-order-id
      properties:
        type:
          type: string
          enum: [ "assert-default-sort-order-id" ]
        default-sort-order-id:
          type: integer

    ManifestLocation:
      type: object
      required:
        - location
        - type
      properties:
        location:
          type: string
        type:
          type: string
          enum:
            - redshift
            - iceberg-json

    CommitTableRequest:
      type: object
      required:
        - requirements
        - updates
      properties:
        identifier:
          $ref: '#/components/schemas/TableIdentifier'
        requirements:
          type: array
          items:
            $ref: '#/components/schemas/TableRequirement'
        updates:
          type: array
          items:
            $ref: '#/components/schemas/TableUpdate'

    CreateTableRequest:
      type: object
      required:
        - name
        - schema
      properties:
        name:
          type: string
        location:
          type: string
        schema:
          $ref: '#/components/schemas/Schema'
        partition-spec:
          $ref: '#/components/schemas/PartitionSpec'
        write-order:
          $ref: '#/components/schemas/SortOrder'
        stage-create:
          type: boolean
        properties:
          type: object
          additionalProperties:
            type: string

    PreplanTableRequest:
      type: object
      properties:
        snapshot-id:
          description:
            The ID of the snapshot to use for the table scan.
          type: integer
          format: int64
        select:
          description:
            A list of fields in schema that are selected in a table scan.
            When not specified, all columns in the requested schema should be selected.
          type: array
          items:
            description:
              A field name that follows the Iceberg naming standard, and can be used in APIs like
              Java `Schema#findField(String name)`.

              The nested field name follows these rules
              - nested struct fields are named by concatenating field names at each struct level using dot (`.`) delimiter,
              e.g. employer.contact_info.address.zip_code
              - nested fields in a map key are named using the keyword `key`, e.g. employee_address_map.key.first_name
              - nested fields in a map value are named using the keyword `value`, e.g. employee_address_map.value.zip_code
              - nested fields in a list are named using the keyword `element`, e.g. employees.element.first_name
            type: string
        filter:
          description: the filters to apply to a table scan, in the form of serialized Iceberg expressions JSON
          type: string
        metrics-requested:
          description: if the planned file scan tasks should contain metrics
          type: boolean
          default: false

    PlanTableRequest:
      type: object
      properties:
        shard:
          type: string

    Transaction:
      type: string
      description: A opaque string encoding information of a transaction

    CheckTransactionStatusRequest:
      type: object
      properties:
        transaction:
          $ref: '#/components/schemas/Transaction'

    ErrorResult:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - message
            - type
            - code
          properties:
            message:
              type: string
              description: Human-readable error message
            type:
              type: string
              description: Internal type definition of the error
              example: NoSuchNamespaceException
            code:
              type: integer
              minimum: 400
              maximum: 600
              description: HTTP response code
              example: 404
            stack:
              type: array
              items:
                type: string
      additionalProperties: false

    LoadCatalogResult:
      type: object
      required:
        - identifier
        - use-extension
      properties:
        identifier:
          type: string
        use-extension:
          type: boolean

    LoadTableResult:
      type: object
      required:
        - metadata
      properties:
        metadata-location:
          type: string
          description: May be null if the table is staged as part of a transaction
        metadata:
          type: object
          description: metadata that follows the table metadata of Apache Iceberg table spec definition
        config:
          type: object
          additionalProperties:
            type: string

    PreplanTableResult:
      type: object
      required:
        - shards
      properties:
        shards:
          type: array
          items:
            type: string
        next-page-token:
          $ref: '#/components/schemas/PageToken'

    PlanTableResult:
      type: object
      required:
        - file-scan-tasks
      properties:
        file-scan-tasks:
          type: array
          items:
            description: a file scan task, in the form of serialized Iceberg FileScanTask JSON
            type: string
        next-page-token:
          $ref: '#/components/schemas/PageToken'

    TransactionStartedResult:
      type: object
      properties:
        transaction:
          $ref: '#/components/schemas/Transaction'

    CheckTransactionStatusResult:
      type: object
      properties:
        status:
          description: The current status of the transaction
          type: string
          enum: [ STARTED, FINISHED, FAILED, CANCELED ]
        error:
          description: If the transaction failed, this field will contain an error message describing the failure
          type: string
      required:
        - status

  responses:
    LoadCatalogResponse:
      description: LoadCatalog response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoadCatalogResult'

    CreateTableResponse:
      description: CreateTable response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoadTableResult'

    PreplanTableResponse:
      description: PreplanTable response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PreplanTableResult'

    PlanTableResponse:
      description: PlanTable response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PlanTableResult'

    LoadTableResponse:
      description: LoadTable response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoadTableResult'

    TransactionStartedResponse:
      description: LoadTable response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionStartedResult'

    CheckTransactionStatusResponse:
      description: LoadTable response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CheckTransactionStatusResult'

    ErrorResponse:
      description: error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
